#include <bcm2835.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <iostream>

using namespace std;

typedef enum {
    NO_ACTION,
    I2C_BEGIN,
    I2C_END
} i2c_init;

//configuracion del clk y la direcciones del dispositivo esclavo
uint8_t  init = NO_ACTION;
uint16_t clk_div = BCM2835_I2C_CLOCK_DIVIDER_626;
uint8_t slave_address = 0x38;

//clase para los registros de la dsp
class Registro{
    private:
        int Direccion;
        int Len_dato;
	string Nombre;
        int Valor;
        
    public:
        Registro(string,int,int);
	string GetNombre();
	float GetValor();
        void Leer();
        void Escribir();
	void SetValor(int _Valor);
};
Registro::Registro (string _Nombre,int _Direccion, int _Len_dato){
    Nombre = _Nombre;
    Direccion = _Direccion;
    Len_dato = _Len_dato;
}
string Registro::GetNombre(){
return Nombre;
}
float Registro::GetValor(){
    return Valor;
}
void Registro::SetValor(int _Valor){
Valor=_Valor;
}
//Función leer
void Registro::Leer(){
    int i;
    char dir[2];
    char buf[Len_dato];
    //limpiar el buffer
    for(i=0;i<Len_dato;i++){
	    buf[i]=0;
    }
    //limpiar el valor del dato
    Valor=0;
    //separar la dirección del registro en dos partes para enviarla por el bus
    dir[1]=Direccion & 0xFF;
    dir[0]=Direccion>>8 & 0xFF;
    //iniciar puerto raspberry
    bcm2835_init();
    init = I2C_BEGIN;
    if (!bcm2835_init())
    {
      printf("bcm2835_init failed. Are you running as root??\n");
    }
    // I2C begin if specified    
    if (init == I2C_BEGIN)
    {
      if (!bcm2835_i2c_begin())
      {
        printf("bcm2835_i2c_begin failed. Are you running as root??\n");
      }
    }
    //Cargar dirección del esclavo
    bcm2835_i2c_setSlaveAddress(slave_address);
    //Cargar la frecuencia del clock
    bcm2835_i2c_setClockDivider(clk_div);
    cout<<"Nombre del registro: "<<Nombre<<endl;
    printf("La dirección es:0x%x%x \n", dir[0],dir[1]);
    printf("Longitud del dato %d byte\n", Len_dato);
    //Cargar variable buf con el valor
    bcm2835_i2c_read_register_rs(dir,buf,Len_dato);
    
    for (i=0; i<Len_dato; i++) {
                if(buf[i] != 'n') printf("Read Buf[%d] = %x\n", i, buf[i]);
        }
    for(i=0;i<Len_dato;i++){
		Valor +=buf[i]<<8*(Len_dato-i-1); 
	}
    printf("Valor leido 0x%x \n", Valor);
    switch (Len_dato){
	case 1:Valor = buf[0]; break;
	case 2:Valor = (buf[0]<<8) | buf[1]; break;
	case 3:Valor = (buf[0]<<16) | (buf[1]<<8) | buf[2]; break;
	case 4:Valor = (buf[0]<<24) | (buf[1]<<16) | (buf[2]<<8) | buf[3]; break;
	default: printf("Le hace falta el tamaño del registro en byte");  
    }
    printf("Valor leido 0x%x \n", Valor);
}
//Fucion escribir
void Registro::Escribir(){
    int i;
    char wbuf[Len_dato+2];
    //limpiar buf
    for(i=0;i<Len_dato+2;i++){
	wbuf[i]=0;
    }
    //separar la dirección del registro en dos partes para enviarla por el bus
    wbuf[1]=Direccion & 0xFF;
    wbuf[0]=Direccion>>8 & 0xFF;
    for(i=0;i<Len_dato;i++){
	//wbuf[Len_dato+2] = (Valor >> (8) & 0xFF;
    }
    //iniciar puertos raspberry
    bcm2835_init();
    init = I2C_BEGIN;
    if (!bcm2835_init()){
      printf("bcm2835_init failed. Are you running as root??\n");
    }
    // I2C begin if specified    
    if (init == I2C_BEGIN){
      if (!bcm2835_i2c_begin()){
        printf("bcm2835_i2c_begin failed. Are you running as root??\n");
      }
    }
    //Cargar dirección del esclavo
    bcm2835_i2c_setSlaveAddress(slave_address);
    //Cargar clock
    bcm2835_i2c_setClockDivider(clk_div);
    cout<<"Nombre del registro: "<<Nombre<<endl;
    printf("La dirección es:0x%x \n",Direccion);
    printf("Longitud del dato %d byte\n", Len_dato);  
    //bcm2835_i2c_write(wbuf,Len_dato);
    printf("Valor= %d\n",Valor);
}

Registro Prueba("Prueba",0x0000,2);
//objetos generales ("Nombre",Direccíón,Lonjitud del dato,Tipo de dato)
//Tipo de dato Normal=0, ZPSE=1, ZP=2, SE=3
//Table 39 Registers Located in DSP Data Memory RAM
Registro AIGAIN("AIGAIN",0X4380,4);
Registro AVGAIN("AVGAIN",0X4381,4);
Registro AV2GAIN("AV2GAIN",0X4382,4);
Registro BIGAIN("BIGAIN",0X4383,4);
Registro BVGAIN("BVGAIN",0X4384,4);
Registro BV2GAIN("BV2GAIN",0X4385,4);
Registro CIGAIN("CIGAIN",0X4386,4);
Registro CVGAIN("CVGAIN",0X4387,4);
Registro CV2GAIN("CV2GAIN",0X4388,4);
Registro NIGAIN("NIGAIN",0X4389,4);
Registro NVGAIN("NVGAIN",0X438A,4);
Registro NV2GAIN("NV2GAIN",0X438B,4);
Registro AIRMSOS("AIRMSOS",0X438C,4);
Registro AVRMSOS("AVRMSOS",0X438D,4);
Registro AV2RMSOS("AV2RMSOS",0X438E,4);
Registro BIRMSOS("BIRMSOS",0X438F,4);
Registro BVRMSOS("BVRMSOS",0X4390,4);
Registro BV2RMSOS("BV2RMSOS",0X4391,4);
Registro CIRMSOS("CIRMSOS",0X4392,4);
Registro CVRMSOS("CVRMSOS",0X4393,4);
Registro CV2RMSOS("CV2RMSOS",0X4394,4);
Registro NIRMSOS("NIRMSOS",0X4395,4);
Registro NVRMSOS("NVRMSOS",0X4396,4);
Registro NV2RMSOS("NV2RMSOS",0X4397,4);
Registro ISUMLVL("ISUMLVL",0X4398,4);
Registro APGAIN("APGAIN",0X4399,4);
Registro BPGAIN("BPGAIN",0X439A,4);
Registro CPGAIN("CPGAIN",0X439B,4);
Registro AWATTOS("AWATTOS",0X439C,4);
Registro BWATTOS("BWATTOS",0X439D,4);
Registro CWATTOS("CWATTOS",0X439E,4);
Registro AVAROS("AVAROS",0X439F,4);
Registro BVAROS("BVAROS",0X43A0,4);
Registro CVAROS("CVAROS",0X43A1,4);
Registro VLEVEL("VLEVEL",0X43A2,4);
Registro AFWATTOS("AFWATTOS",0X43A3,4);
Registro BFWATTOS("BFWATTOS",0X43A4,4);
Registro CFWATTOS("CFWATTOS",0X43A5,4);
Registro AFVAROS("AFVAROS",0X43A6,4);
Registro BFVAROS("BFVAROS",0X43A7,4);
Registro CFVAROS("CFVAROS",0X43A8,4);
Registro AFIRMSOS("AFIRMSOS",0X43A9,4);
Registro BFIRMSOS("BFIRMSOS",0X43AA,4);
Registro CFIRMSOS("CFIRMSOS",0X43AB,4);
Registro AFVRMSOS("AFVRMSOS",0X43AC,4);
Registro BFVRMSOS("BFVRMSOS",0X43AD,4);
Registro CFVRMSOS("CFVRMSOS",0X43AE,4);
Registro TEMPCO("TEMPCO",0X43AF,4);
Registro ATEMPo("ATEMPo",0X43B0,4);
Registro BTEMPo("BTEMPo",0X43B1,4);
Registro CTEMPo("CTEMPo",0X43B2,4);
Registro NTEMPo("NTEMPo",0X43B3,4);
Registro ATGAIN("ATGAIN",0X43B4,4);
Registro BTGAIN("BTGAIN",0X43B5,4);
Registro CTGAIN("CTGAIN",0X43B6,4);
Registro NTGAIN("NTGAIN",0X43B7,4);

Registro AIRMS("AIRMS",0X43C0,4);
Registro AVRMS("AVRMS",0X43C1,4);
Registro AV2RMS("AV2RMS",0X43C2,4);
Registro BIRMS("BIRMS",0X43C3,4);
Registro BVRMS("BVRMS",0X43C4,4);
Registro BV2RMS("BV2RMS",0X43C5,4);
Registro CIRMS("CIRMS",0X43C6,4);
Registro CVRMS("CVRMS",0X43C7,4);
Registro CV2RMS("CV2RMS",0X43C8,4);
Registro NIRMS("NIRMS",0X43C9,4);
Registro ISUM("ISUM",0X43CA,4);
Registro ATEMP("ATEMP",0X43CB,4);
Registro BTEMP("BTEMP",0X43CC,4);
Registro CTEMP("CTEMP",0X43CD,4);
Registro NTEMP("NTEMP",0X43CE,4);

//Table 40 Internal DSP Memory RAM Registers
Registro Run("Run",0xE228,2);

//Table 41 Billable Registers
Registro AWATTHR("AWATTHR",0XE400,4);
Registro BWATTHR("BWATTHR",0XE401,4);
Registro CWATTHR("CWATTHR",0XE402,4);
Registro AFWATTHR("AFWATTHR",0XE403,4);
Registro BFWATTHR("BFWATTHR",0XE404,4);
Registro CFWATTHR("CFWATTHR",0XE405,4);
Registro AVARHR("AVARHR",0XE406,4);
Registro BVARHR("BVARHR",0XE407,4);
Registro CVARHR("CVARHR",0XE408,4);
Registro AFVARHR("AFVARHR",0XE409,4);
Registro BFVARHR("BFVARHR",0XE40A,4);
Registro CFVARHR("CFVARHR",0XE40B,4);
Registro AVAHR("AVAHR",0XE40C,4);
Registro BVAHR("BVAHR",0XE40D,4);
Registro CVAHR("CVAHR",0XE40E,4);

//Tabla 42 Configuration and Power Quality Registers

Registro IPEAK("IPEAK",0XE500,4);
Registro VPEAK("VPEAK",0XE501,4);
Registro STATUS0("STATUS0",0XE502,4);
Registro STATUS1("STATUS1",0XE503,4);

Registro OILVL("OILVL",0XE507,4);
Registro OVLVL("OVLVL",0XE508,4);
Registro SAGLVL("SAGLVL",0XE509,4);
Registro MASK0("MASK0",0XE50A,4);
Registro MASK1("MASK1",0XE50B,4);
Registro IAWV("IAWV",0XE50C,4);
Registro IBWV("IBWV",0XE50D,4);
Registro ICWV("ICWV",0XE50E,4);
Registro INWV("INWV",0XE50F,4);
Registro VAWV("VAWV",0XE510,4);
Registro VBWV("VBWV",0XE511,4);
Registro VCWV("VCWV",0XE512,4);
Registro VA2WV("VA2WV",0XE513,4);
Registro VB2WV("VB2WV",0XE514,4);
Registro VC2WV("VC2WV",0XE515,4);
Registro VNWV("VNWV",0XE516,4);
Registro VN2WV("VN2WV",0XE517,4);
Registro AWATT("AWATT",0XE518,4);
Registro BWATT("BWATT",0XE519,4);
Registro CWATT("CWATT",0XE51A,4);
Registro AVAR("AVAR",0XE51B,4);
Registro BVAR("BVAR",0XE51C,4);
Registro CVAR("CVAR",0XE51D,4);
Registro AVA("AVA",0XE51E,4);
Registro BVA("BVA",0XE51F,4);
Registro CVA("CVA",0XE520,4);
Registro AVTHD("AVTHD",0XE521,4);
Registro AITHD("AITHD",0XE522,4);
Registro BVTHD("BVTHD",0XE523,4);
Registro BITHD("BITHD",0XE524,4);
Registro CVTHD("CVTHD",0XE525,4);
Registro CITHD("CITHD",0XE526,4);

Registro NVRMS("NVRMS",0XE530,4);
Registro NV2RMS("NV2RMS",0XE531,4);
Registro CHECKSUM("CHECKSUM",0XE532,4);
Registro VNOM("VNOM",0XE533,4);

Registro AFIRMS("AFIRMS",0XE537,4);
Registro AFVRMS("AFVRMS",0XE538,4);
Registro BFIRMS("BFIRMS",0XE539,4);
Registro BFVRMS("BFVRMS",0XE53A,4);
Registro CFIRMS("CFIRMS",0XE53B,4);
Registro CFVRMS("CFVRMS",0XE53C,4);

Registro LAST_RWDATA32("LAST_RWDATA32",0XE5FF,4);
Registro PHSTATUS("PHSTATUS",0XE600,2);
Registro ANGLE0("ANGLE0",0XE601,2);
Registro ANGLE1("ANGLE1",0XE602,2);
Registro ANGLE2("ANGLE2",0XE603,2);

Registro PHNOLOAD("PHNOLOAD",0XE608,2);

Registro LINECYC("LINECYC",0XE60C,2);
Registro ZXTOUT("ZXTOUT",0XE60D,2);
Registro CAMPMODE("CAMPMODE",0XE60E,2);

Registro CFMODE("CFMODE",0XE610,2);
Registro CF1DEN("CF1DEN",0XE611,2);
Registro CF2DEN("CF2DEN",0XE612,2);
Registro CF3DEN("CF3DEN",0XE613,2);
Registro APHCAL("APHCAL",0XE614,2);
Registro BPHCAL("BPHCAL",0XE615,2);
Registro CPHCAL("CPHCAL",0XE616,2);
Registro PHSING("PHSING",0XE617,2);
Registro CONFIG("CONFIG",0xE618,2);

Registro MMODE("MMODE",0xE700,1);
Registro ACCMODE("ACCMODE",0xE701,1);
Registro LCYCMODE("LCYCMODE",0xE702,1);
Registro PEAKCYC("PEAKCYC",0xE703,1);
Registro SAGCYC("SAGCYC",0xE704,1);
Registro CFCYC("CFCYC",0xE705,1);
Registro HSDC_CFG("HSDC_CFG",0xE706,1);
Registro Version("Version",0xE707,1);
Registro CONFIG3("CONFIG3",0xE708,1);
Registro ATEMPOS("ATEMPOS",0xE709,1);
Registro BTEMPOS("BTEMPOS",0xE70A,1);
Registro CTEMPOS("CTEMPOS",0xE70B,1);
Registro NTEMPOS("NTEMPOS",0xE70C,1);

Registro LAST_RWDATA8("LAST_RWDATA8",0xE7FD,1);

Registro APF("APF",0xE902,2);
Registro BPF("BPF",0xE903,2);
Registro CPF("CPF",0xE904,2);
Registro APERIOD("APERIOD",0xE905,2);
Registro BPERIOD("BPERIOD",0xE906,2);
Registro CPERIOD("CPERIOD",0xE907,2);
Registro APNOLOAD("APNOLOAD",0xE908,2);
Registro VARNOLOAD("VARNOLOAD",0xE909,2);
Registro VANOLOAD("VANOLOAD",0xE90A,2);

Registro LAST_ADD("LAST_ADD",0xE9FE,2);
Registro LAST_RWDATA16("LAST_RWDATA16",0xE9FF,2);
Registro CONFIG2("CONFIG2",0xEA00,1);
Registro LAST_OP("LAST_OP",0xEA01,1);
Registro WTHR("WTHR",0xEA02,1);
Registro VARTHR("VARTHR",0xEA03,1);
Registro VATHR("VATHR",0xEA04,1);


int main() {
	//CONFIG.Leer();
	//AWATTHR.Leer();
	Prueba.SetValor(-50000);
	Prueba.Escribir();
   return 0;
}
